#!/usr/bin/env python

#stdlib imports
import sys
import os.path
import argparse
import glob
import pprint

#third party imports
from configobj import ConfigObj, flatten_errors
from validate import Validator

from shakelib.grind.container import InputContainer
from shakelib.utils.config import get_config_paths, get_custom_validator,\
        config_error

def main(args):
    install_path, data_path = get_config_paths()
    datadir = os.path.join(data_path,args.eventid)
    if not os.path.isdir(datadir):
        print('%s is not a valid directory.' % datadir)
        sys.exit(1)

    eventxml = os.path.join(datadir,'event.xml')
    print('Looking for event.xml file...')
    if not os.path.isfile(eventxml):
        print('%s does not exist.' % eventxml)
        sys.exit(1)

    #
    # Look for global configs in install_path/config
    #
    spec_file = os.path.join(os.path.expanduser('~'),
                             '.shakemap','configspec.conf')
    validator = get_custom_validator()
    print('Looking for configuration files...')
    modules = ConfigObj(
            os.path.join(install_path, 'config', 'modules.conf'),
            configspec=spec_file)
    gmpe_sets = ConfigObj(
            os.path.join(install_path, 'config', 'gmpe_sets.conf'),
            configspec=spec_file)
    global_grind = ConfigObj(
            os.path.join(install_path, 'config', 'grind.conf'),
            configspec=spec_file)
    #
    # this is the event specific grind.conf (may not be present)
    # prefer grind.conf to grind_zc.conf
    #
    event_grind_file = os.path.join(datadir, 'grind.conf')
    event_grind_zc_file = os.path.join(datadir, 'grind_zc.conf')
    if os.path.isfile(event_grind_file):
        event_grind = ConfigObj(event_grind_file, configspec=spec_file)
    elif os.path.isfile(event_grind_zc_file):
        event_grind = ConfigObj(event_grind_zc_file, configspec=spec_file)
    else:
        event_grind = ConfigObj()

    #
    # start merging event_grind
    #
    global_grind.merge(event_grind)
    global_grind.merge(modules)
    global_grind.merge(gmpe_sets)

    #
    # Add dummy zone_info section and its subsections
    #
    if 'zone_info' not in global_grind:
        global_grind['zone_info'] = {}
        global_grind['zone_info']['slab'] = {}
        global_grind['zone_info']['plunge_values'] = {}
        global_grind['zone_info']['plunge_values']['taxis'] = {}
        global_grind['zone_info']['plunge_values']['paxis'] = {}
        global_grind['zone_info']['plunge_values']['naxis'] = {}
        global_grind['zone_info']['plunge_values']['nodalplane1'] = {}
        global_grind['zone_info']['plunge_values']['nodalplane2'] = {}
        global_grind['zone_info']['equations'] = {}

    results = global_grind.validate(validator)
    if results != True:
        config_error(global_grind, results)

    check_config(global_grind)

    #
    # The vs30 file may have macros in it
    #
    vs30file = global_grind['grind']['vs30file']
    if vs30file:
        vs30file = vs30file.replace('<DATA_DIR>', data_path)
        vs30file = vs30file.replace('<EVENT_ID>', args.eventid)
        if not os.path.isfile(vs30file):
            print("file '%s' is not a valid file" % vs30file)
            sys.exit(1)
        global_grind['grind']['vs30file'] = vs30file
#    pprint.pprint(global_grind)

    config = global_grind.dict()

    print('Looking for data files...')
    datafiles = glob.glob(os.path.join(datadir,'*_dat.xml'))
    print('Looking for rupture files...')
    rupturefiles = glob.glob(os.path.join(datadir,'*_fault.txt'))
    rupturefile = None
    if len(rupturefiles):
        rupturefile = rupturefiles[0]

    hdf_file = os.path.join(datadir,'shake_data.hdf')

    print('Creating input container...')
    shake_data = InputContainer.loadFromInput(hdf_file, config, eventxml,
                                        rupturefile, datafiles=datafiles)
    print('Created HDF5 input container in %s' % shake_data.getFileName())
    shake_data.close()

def check_config(config):
    if config['grind']['gmpe'] not in config['gmpe_sets']:
        print('Configuration error: gmpe %s not in gmpe_sets' % 
                (config['grind']['gmpe']))
        sys.exit(1)
    if config['grind']['gmice'] not in config['gmice_modules']:
        print('Configuration error: gmice %s not in gmice_modules' % 
                (config['grind']['gmice']))
        sys.exit(1)
    if config['grind']['ipe'] not in config['ipe_modules']:
        print('Configuration error: ipe %s not in ipe_modules' % 
                (config['grind']['ipe']))
        sys.exit(1)
    if config['grind']['ccf'] not in config['ccf_modules']:
        print('Configuration error: ccf %s not in ccf_modules' % 
                (config['grind']['ccf']))
        sys.exit(1)


if __name__ == '__main__':
    description = '''Assemble ShakeMap input data into an HDF package.
The only argument is a ShakeMap event ID, which should correspond to a 
directory in the ShakeMap data directory. The output will be an HDF5 data 
file called shake_data.hdf in that same event data directory.
'''
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('eventid', 
                    help='Path to ShakeMap data directory containing '
                         'event.xml, grind_zc.conf')
    pargs = parser.parse_args()
    main(pargs)
