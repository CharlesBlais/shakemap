#!/usr/bin/env python

# stdlib imports
import argparse
import os.path
import json

# local imports
from shakemap.utils.config import get_config_paths
from shakemap.utils.pgm_convert import get_stations_dict


def main():
    description = '''Import an Excel spreadsheet of MMI values.

    The format of the input spreadsheet can be one of two forms:

    ----------------------------------------------
    |Reference|Jones and Smith, 1994|
    ----------------------------------------------
    |STATION|LAT |LON|NETID|SOURCE|FLAG|INTENSITY
    ----------------------------------------------
    |ABC    |34.1|...

    for macroseismic data, where INTENSITY is an MMI
    value between 1 and 10.

    OR

    ----------------------------------------------
    |Reference|Jones and Smith, 1994|
    ----------------------------------------------
    |STATION|LAT |LON|NETID|SOURCE|FLAG|  <CHANNEL>
    ----------------------------------------------
                                       |PGA|PGV|SA(0.3)|...
    ------------------------------------------------------
    |ABC    |34.1|...

    where CHANNEL is something like HNE, HNN, H1, H2, etc. If the data
    represent the greater of two horizontal channels, just use
    H1 for the channel. Merge the cells above the IMT types (PGA, PGV, etc.)
    and those IMTs will be interpreted as "belonging" to the channel above
    them.

    Input: Excel spreadsheet with the following REQUIRED columns:
     - STATION: Station code.

     - LAT: Latitude of observation.
     - LON: Longitude of observation.
     - LOC: Description of location of observation.
     - SOURCE: Description of source of observation.
     - NETID: Network that originated observation.
     - ELEV: Elevation of observation.
     - FLAG: Flag value (non-zero is bad).

     and the following OPTIONAL COLUMNS:
     - INTENSITY: MMI value between 1-10.

    '''
    fmter = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=fmter)
    parser.add_argument('eventid', metavar='EVENTID', help='Input eventid')
    parser.add_argument('file', metavar='FILE', help='Input spreadsheet')
    args = parser.parse_args()

    _, data_path = get_config_paths()
    datadir = os.path.join(data_path, args.eventid, 'current')
    if not os.path.isdir(datadir):
        os.makedirs(datadir)

    jdict, nrows = get_stations_dict(args.file)
    _, fname = os.path.split(args.file)
    basename, _ = os.path.splitext(fname)
    jsonfile = os.path.join(datadir, basename + '_dat.json')
    with open(jsonfile, 'wt') as f:
        json.dump(jdict, f)
    print('Wrote %i records to %s' % (nrows, jsonfile))


if __name__ == '__main__':
    main()
