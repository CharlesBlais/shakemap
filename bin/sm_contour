#!/usr/bin/env python
"""
Read shake_result.hdf and produce a set of GeoJSON contours in the
event's 'products' directory.
"""

#stdlib imports
import sys
import os.path
import argparse
import logging

#neic imports
from shakelib.utils.containers import OutputContainer
from shakemap.utils.config import get_config_paths
from shakemap.products.contour import contour_to_files

#third party imports
from configobj import ConfigObj

def get_parser():
    description = '''
    Make a set of contours from shake_result.hdf.
    '''
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('eventid',
                        help='The id of the event to process.')
    parser.add_argument('-d', '--debug', action='store_true',
                        help='Print all informational messages.')
    parser.add_argument('-q', '--quiet', action='store_true',
                        help='Print only errors.')
    return parser

def main(args):
    verbose = args.verbose
    #
    # Find the shake_data file
    #
    install_path, data_path = get_config_paths()
    datadir = os.path.join(data_path, args.eventid, 'current', 'products')
    if not os.path.isdir(datadir):
        print('%s is not a valid directory.' % datadir)
        sys.exit(1)
    datafile = os.path.join(datadir, 'shake_result.hdf')
    if not os.path.isfile(datafile):
        print('%s is not a valid shake result file.' % datafile)
        sys.exit(1)

    # set up logging
    logdir = os.path.join(data_path, args.eventid, 'current', 'log')
    if not os.path.isdir(logdir):
        os.mkdir(logdir)
    logfile = os.path.join(logdir,'sm_contour.log')
    logger = logging.getLogger('shakelog')
    logger.setLevel(logging.DEBUG)
    fh = logging.FileHandler(logfile)
    fh.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    fh.setFormatter(formatter)
    logger.addHandler(fh)

        
    # Open the OutputContainer and extract the data
    container = OutputContainer.load(datafile)

    # get the path to the products.conf file, load the config
    config_file = os.path.join(install_path, 'config', 'products.conf')
    config = ConfigObj(config_file)

    # create contour files
    contour_to_files(container,config,datadir)

    if verbose:
        print('Contour files created in %s.' % datadir)
    fh.close()
    

if __name__ == '__main__':
    parser = get_parser()
    pargs = parser.parse_args()
    main(pargs)
    sys.exit(0)
