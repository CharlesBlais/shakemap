#!/usr/bin/env python

import os
import pytest

import numpy as np

from shakemap.utils.generic_amp import get_generic_amp_factors


do_test = True

class Dummy(object):
    pass

def test_generic_amp():
    #
    # Using the LA basin test data set, make a set of lons and lats
    # Bounds of data set: -119.284/-117.284/32.9/34.6
    # But we want to go somewhat beyond the bounds in order to test
    # that functionality
    #
    lons = np.linspace(-119.284, -117.0, 50)
    lats = np.linspace(32.9, 35.0, 50)

    sx = Dummy()
    sx.lons = lons
    sx.lats = lats

    gaf = get_generic_amp_factors(sx, 'PGA')
    gaf_target = np.array(
      [-0.14      , -0.14      , -0.14      , -0.14      , -0.14      ,
       -0.14      , -0.14      , -0.14      , -0.14      , -0.14      ,
       -0.14      , -0.14      , -0.14      , -0.14      , -0.14      ,
       -0.14      , -0.14      , -0.14      , -0.14      , -0.14      ,
       -0.14      , -0.01270001,  0.09115   ,  0.14475001,  0.26200002,
        0.1682    ,  0.0811    ,  0.12464999,  0.061     , -0.11655   ,
       -0.11655   , -0.14      , -0.14      , -0.14      , -0.14      ,
       -0.14      , -0.14      , -0.14      , -0.14      , -0.14      ,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ])
    if do_test is True:
        assert np.allclose(gaf, gaf_target)
    else:
        print('PGA:')
        print(repr(gaf))

    gaf = get_generic_amp_factors(sx, 'SA(0.3)')
    gaf_target = np.array(
      [-0.12      , -0.12      , -0.12      , -0.12      , -0.12      ,
       -0.12      , -0.12      , -0.12      , -0.12      , -0.12      ,
       -0.12      , -0.12      , -0.12      , -0.12      , -0.12      ,
       -0.12      , -0.12      , -0.12      , -0.12      , -0.12      ,
       -0.12      , -0.0117    ,  0.07665   ,  0.12225   ,  0.222     ,
        0.14219999,  0.0681    ,  0.10515001,  0.051     , -0.10005   ,
       -0.10005   , -0.12      , -0.12      , -0.12      , -0.12      ,
       -0.12      , -0.12      , -0.12      , -0.12      , -0.12      ,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ])
    if do_test is True:
        assert np.allclose(gaf, gaf_target)
    else:
        print('SA(0.3):')
        print(repr(gaf))

    gaf = get_generic_amp_factors(sx, 'SA(2.0)')
    gaf_target = np.array(
      [-0.20583493, -0.20583493, -0.20583493, -0.20583493, -0.20583493,
       -0.20583493, -0.20583493, -0.20583493, -0.20583493, -0.20583493,
       -0.20583493, -0.20583493, -0.20583493, -0.20583493, -0.20583493,
       -0.20583493, -0.20583493, -0.20583493, -0.20583493, -0.20583493,
       -0.20583493,  0.01017742,  0.186398  ,  0.27735054,  0.47630933,
        0.31714228,  0.1693444 ,  0.24324335,  0.1352372 , -0.16604316,
       -0.16604316, -0.20583493, -0.20583493, -0.20583493, -0.20583493,
       -0.20583493, -0.20583493, -0.20583493, -0.20583493, -0.20583493,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ])
    if do_test is True:
        assert np.allclose(gaf, gaf_target)
    else:
        print('SA(2.0):')
        print(repr(gaf))

    gaf = get_generic_amp_factors(sx, 'SA(4.0)')
    gaf_target = np.array(
      [-0.18000001, -0.18000001, -0.18000001, -0.18000001, -0.18000001,
       -0.18000001, -0.18000001, -0.18000001, -0.18000001, -0.18000001,
       -0.18000001, -0.18000001, -0.18000001, -0.18000001, -0.18000001,
       -0.18000001, -0.18000001, -0.18000001, -0.18000001, -0.18000001,
       -0.18000001,  0.02900001,  0.19949999,  0.28749999,  0.48000002,
        0.32599998,  0.183     ,  0.2545    ,  0.15000001, -0.1415    ,
       -0.1415    , -0.18000001, -0.18000001, -0.18000001, -0.18000001,
       -0.18000001, -0.18000001, -0.18000001, -0.18000001, -0.18000001,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ])
    if do_test is True:
        assert np.allclose(gaf, gaf_target)
    else:
        print('SA(4.0):')
        print(repr(gaf))

    gaf = get_generic_amp_factors(sx, 'SA(0.1)')
    gaf_target = np.array(
      [-0.12      , -0.12      , -0.12      , -0.12      , -0.12      ,
       -0.12      , -0.12      , -0.12      , -0.12      , -0.12      ,
       -0.12      , -0.12      , -0.12      , -0.12      , -0.12      ,
       -0.12      , -0.12      , -0.12      , -0.12      , -0.12      ,
       -0.12      , -0.0117    ,  0.07665   ,  0.12225   ,  0.222     ,
        0.14219999,  0.0681    ,  0.10515001,  0.051     , -0.10005   ,
       -0.10005   , -0.12      , -0.12      , -0.12      , -0.12      ,
       -0.12      , -0.12      , -0.12      , -0.12      , -0.12      ,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ])
    if do_test is True:
        assert np.allclose(gaf, gaf_target)
    else:
        print('SA(0.1):')
        print(repr(gaf))


if __name__ == '__main__':
    os.environ['CALLED_FROM_PYTEST'] = 'True'
    test_generic_amp()

